</p>
      <div>
        <label htmlFor="firstName">First name*</label>
        <input type="text" id="firstName" name="firstName" value={formData.firstName} onChange={handleChange} required />
      </div>
       <div>
        <label htmlFor="streetAddress">Street address*</label>
        <input type="text" id="streetAddress" name="streetAddress" value={formData.streetAddress} onChange={handleChange} required />
      </div>
      <div>
        <label htmlFor="lastName">Last name*</label>
        <input type="text" id="lastName" name="lastName" value={formData.lastName} onChange={handleChange} required />
      </div>
       <div>
        <label htmlFor="aptSuite">Apt, suite, etc (optional)</label>
        <input type="text" id="aptSuite" name="aptSuite" value={formData.aptSuite} onChange={handleChange} />
      </div>
      <div>
        <label htmlFor="phoneNumber">Phone number* (in case of delivery questions)</label>
        <input type="tel" id="phoneNumber" name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} required />
      </div>
      <div>
        <label htmlFor="city">City*</label>
        <input type="text" id="city" name="city" value={formData.city} onChange={handleChange} required />
      </div>
      <div>
        <label htmlFor="emailAddress">Email address for order notification*</label>
        <input type="email" id="emailAddress" name="emailAddress" value={formData.emailAddress} onChange={handleChange} required />
      </div>
      <div>
        <label htmlFor="state">State*</label>
        <select id="state" name="state" value={formData.state} onChange={handleChange} required>
           <option value="Maryland">Maryland</option> 
          {/* Add other state options here */}
        </select>
      </div>
      <div>
        <label htmlFor="zipCode">ZIP code*</label>
        <input type="text" id="zipCode" name="zipCode" value={formData.zipCode} onChange={handleChange} required />
      </div>


    </div>
  );
};

export default AddressForm;
```


*Data (JSON):*

```json
{
  "firstName": "",
  "lastName": "",
  "streetAddress": "",
  "aptSuite": "",
  "city": "Mount Rainier",
  "state": "Maryland",
  "zipCode": "20712",
  "phoneNumber": "",
  "emailAddress": ""
}

```

*Style (CSS/TypeScript):*
```typescript jsx
import styled from 'styled-components'

export const FormContainer = styled.form`

display: grid;
grid-template-columns: 1fr 1fr;
gap: 1rem;
max-width: 500px; /* Adjust as needed */
margin: 0 auto;


label{
  display: block;
margin-bottom: 0.5rem;

}
input, select {
width: 100%;
padding: 0.5rem;
border: 1px solid #ccc;
border-radius: 4px;
box-sizing: border-box;


}

`



```


This code provides a functional form with basic styling.  You would need to integrate this with your Pega application and potentially adapt it based on Pega-specific requirements.  Remember to handle form submission and data processing appropriately within your Pega environment.